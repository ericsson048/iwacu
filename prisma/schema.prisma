// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                    String  @id @default(cuid())
  userId                String
  type                  String
  provider              String
  providerAccountId     String
  refreshTokenExpiresIn String?
  refresh_token         String?
  access_token          String?
  expires_at            Int?
  token_type            String?
  scope                 String?
  id_token              String?
  session_state         String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  sessionId    String
  sessionToken String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  expiresAt    DateTime
}


model User {
  id           String   @id @default(cuid())
  username     String   @unique
  firstName    String
  lastName     String
  email        String   @unique
  country      String
  hotelId      String?  @map("hotel_id") 
  cityId       String?  
  img          String?
  phone        String
  password     String
  isHotelAdmin Boolean  @default(false)
  isSuperAdmin Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  accounts     Account[]
  sessions      Session[]
  city         City?    @relation(fields: [cityId], references: [id])
}

model VerificationToken {
  id        String   @id @default(cuid())
  token     String
  createdAt DateTime @default(now())
  expiresAt DateTime
  @@unique([token])
}



model Hotel {
  id            String   @id @default(cuid())
  name          String
  type          String
  cityId        String
  city          City     @relation(fields: [cityId], references: [id])
  address       String
  photo         String[]
  distance      Float
  desc          String
  title         String
  userId        String   
  rating        Float?
  rooms         Room[]
  cheapestPrice Float
  featured      Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Room {
  id          String      @id @default(cuid()) 
  title       String
  price       Float
  maxPeople   Int
  desc        String
  hotelId     String
  hotel       Hotel       @relation(fields: [hotelId], references: [id])
  roomNumbers RoomNumber[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model RoomNumber {
  id              String    @id @default(cuid()) 
  roomId          String
  numero          Int
  unAvailableDates DateTime[]
  room            Room      @relation(fields: [roomId], references: [id])
}

model City {
  id         String   @id @default(cuid())
  name       String
  photo      String?
  users      User[]
  hotels     Hotel[]
  tourism    Tourism[]
  events     Event[]
  restaurants Restaurant[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Tourism {
  id           String   @id @default(cuid())
  name         String
  description  String
  location     String
  openingHours String?
  cityId       String?
  city         City?    @relation(fields: [cityId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Event {
  id           String   @id @default(cuid())
  name         String
  description  String
  date         DateTime
  location     String
  cityId       String?
  city         City?    @relation(fields: [cityId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Restaurant {
  id           String   @id @default(cuid())
  name         String
  cuisineType  String
  location     String
  rating       Float?
  cityId       String?
  city         City?    @relation(fields: [cityId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
